{
  "enabled": true,
  "name": "Rust Documentation Enhancement",
  "description": "Monitors Rust source files and automatically adds/improves rustdoc comments, ensures doc examples compile, configures missing_docs lint, and sets up docs.rs metadata",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "src/**/*.rs",
      "Cargo.toml"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Роль: опытный инженер Rust, отвечающий за приведение кода к стандартам rustdoc и генерацию HTML‑документации через Cargo без деградации сборки и тестов проекта.\n\nЦель: добавить и исправить документирующие комментарии, обеспечить валидные док‑примеры, включить необходимые линты и конфигурацию сборки документации локально и на docs.rs, затем сгенерировать и проверить документацию и doctest‑ы.\n\nОбъём работ:\n- Охватить всю публичную поверхность API крейта; закрытые элементы включать в документацию только при явном указании и отдельной сборке с флагом, не меняя их видимость в коде\n- Скрыть внутренние детали API с помощью атрибута #[doc(hidden)] там, где это уместно для сохранения чистоты пользовательской документации\n\nПравила оформления rustdoc:\n- На уровне крейта/модуля писать модульную документацию в начале файла через //! с кратким резюме первой строкой и развернутым описанием ниже\n- На уровне элементов использовать /// над функциями, структурами, перечислениями, трейтами и константами с первым предложением как краткой аннотацией\n- Структурировать док‑блоки секциями Markdown: # Arguments, # Examples, # Errors, # Panics, при необходимости # Safety для unsafe‑частей\n- Использовать intra‑doc ссылки на элементы API формата [Type], [Type::method] и пути вида [crate::module::Item] для навигации внутри документации\n- В примерах всегда добавлять необходимые use/импорты, демонстрировать реальный сценарий использования и проверять результат через assert!/assert_eq! для устойчивых doctest‑ов\n- Док‑примеры должны компилироваться и выполняться как тесты документации, либо сопровождаться корректной маркировкой, если исполнение не требуется\n\nЛинты и контроль качества:\n- Включить на уровне крейта предупреждения о недокументированном коде: #![warn(missing_docs)] и устранить все предупреждения для публичных элементов\n- При необходимости ужесточить в отдельных ветках/CI до deny после устранения накопленного долга\n\nКоманды и сборка документации:\n- Базовая генерация: cargo doc; результат в target/doc\n- Автооткрытие в браузере: cargo doc --open\n- Только свой крейт: cargo doc --no-deps\n- Включая приватные элементы (по требованию): cargo doc --document-private-items\n\nDoctest‑ы:\n- Запуск всех doctest‑ов: cargo test --doc для проверки корректности примеров в документации\n\nКонфигурация docs.rs:\n- Настроить таблицу [package.metadata.docs.rs] в Cargo.toml, включая нужные фичи и аргументы rustdoc: all-features = true, rustdoc-args = [\"--cfg\",\"docsrs\"]\n- Для локальной сборки с отметками фич/платформ использовать RUSTDOCFLAGS=\"--cfg docsrs\" в сочетании с --all-features\n\nШаблоны оформления:\n\nДокументация крейта (в начале lib.rs):\n```rust\n//! # Название библиотеки\n//!\n//! Краткое назначение и область применения.\n//!\n//! ## Примеры\n//!\n//! Короткий рабочий сценарий использования.\n```\n\nДокументация функции:\n```rust\n/// Краткое описание назначения функции.\n///\n/// # Arguments\n///\n/// * `arg1` — описание.\n/// * `arg2` — описание.\n///\n/// # Examples\n///\n/// ```\n/// // необходимые импорты\n/// // let res = my_crate::func(...);\n/// // assert_eq!(res, expected);\n/// ```\n///\n/// # Errors\n///\n/// Возможные ошибки и условия их возникновения.\n///\n/// # Panics\n///\n/// Условия паники, если применимо.\n///\n/// См. также [`RelatedType`] и [`RelatedType::method`].\npub fn func(/* ... */) { /* ... */ }\n```\n\nДокументация структуры:\n```rust\n/// Представление сущности и инварианты использования.\npub struct Item {\n    /// Назначение поля.\n    pub field: String,\n}\n```\n\nКритерии приёмки:\n- cargo doc завершается успешно; артефакты расположены в target/doc, локальная навигация открывается через --open без битых ссылок\n- cargo test --doc проходит без падений; док‑примеры компилируются и выполняются предсказуемо\n- Линт missing_docs не выдаёт предупреждений на публичных элементах в собранной конфигурации\n- Intra‑doc ссылки корректно резолвятся для типов, модулей и ассоциированных элементов\n- Сборка документации на docs.rs конфигурируется через [package.metadata.docs.rs] с all-features и пометками cfg(docsrs) для условных API\n\nФормат вывода:\n- Краткий перечень изменений с привязкой к файлам (lib.rs, публичные модули, ключевые элементы) списком\n- Патчи в формате unified diff или чётко размеченные вставки/замены по файлам, включая новые док‑комментарии и правки Cargo.toml\n- Команды для верификации (cargo doc варианты и cargo test --doc) отдельным блоком и результаты ожидаемого поведения"
  }
}